"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cbor = require("cbor");
var ByronAddressKind;
(function (ByronAddressKind) {
    ByronAddressKind[ByronAddressKind["spendingAddress"] = 0] = "spendingAddress";
    ByronAddressKind[ByronAddressKind["scriptAddress"] = 1] = "scriptAddress";
    ByronAddressKind[ByronAddressKind["redeemAddress"] = 2] = "redeemAddress";
    ByronAddressKind[ByronAddressKind["stakingAddress"] = 3] = "stakingAddress";
})(ByronAddressKind = exports.ByronAddressKind || (exports.ByronAddressKind = {}));
var ByronAddressAttributes;
(function (ByronAddressAttributes) {
    ByronAddressAttributes[ByronAddressAttributes["stakeDistribution"] = 0] = "stakeDistribution";
    ByronAddressAttributes[ByronAddressAttributes["derivationPath"] = 1] = "derivationPath";
    ByronAddressAttributes[ByronAddressAttributes["networkMagic"] = 2] = "networkMagic";
})(ByronAddressAttributes = exports.ByronAddressAttributes || (exports.ByronAddressAttributes = {}));
var ByronAddressName;
(function (ByronAddressName) {
    ByronAddressName["spending"] = "spending";
    ByronAddressName["script"] = "script";
    ByronAddressName["redeem"] = "redeem";
    ByronAddressName["staking"] = "staking";
})(ByronAddressName = exports.ByronAddressName || (exports.ByronAddressName = {}));
function translateByronAddressKind(kind) {
    switch (kind) {
        case 0:
            return ByronAddressName.spending;
        case 1:
            return ByronAddressName.script;
        case 2:
            return ByronAddressName.redeem;
        case 3:
            return ByronAddressName.staking;
        default:
            throw new Error('Unrecognised ByronAddressKind');
    }
}
exports.translateByronAddressKind = translateByronAddressKind;
function decodeByronAddress(bytes) {
    try {
        const [payload] = cbor.decode(bytes);
        const result = cbor.decode(payload.value);
        const kind = result[2];
        const attributes = Object.is(Object.getPrototypeOf(result[1]), Map.prototype)
            ? result[1]
            : new Map();
        return { addressName: translateByronAddressKind(kind), attributes, kind };
    }
    catch (e) {
        return null;
    }
}
exports.decodeByronAddress = decodeByronAddress;
//# sourceMappingURL=ByronAddress.js.map